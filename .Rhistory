?seq
seq(from = 0, to = 1, by = 0.25)
sequency <- seq(from = 0, to = 1, by = 0.25)
uniform <- runif(50, min = 0, max = 1)
uniform <- runif(50, min = 0, max = 1)
quantile(sequency)
?quantile
tarefa <- function(n, n2){
sequency <- seq(from = 0, to = 1, by = n)
uniform <- runif(n2, min = 0, max = 1)
quantile(sequency, probs = seq(from = 0, to = 1, by = n))
}
tarefa(0.25, 50)
sequency <- seq(from = 0, to = 1, by = 0.25)
uniform <- runif(50, min = 0, max = 1)
quant <- quantile(sequency, probs = seq(from = 0, to = 1, by = 0.25))
quant
sequency <- seq(from = 0, to = 1, by = 0.33)
uniform <- runif(50, min = 0, max = 1)
quant <- quantile(sequency, probs = seq(from = 0, to = 1, by = 0.33))
quant
str(quant)
quant[1]
quant[2]
quant[3]
quant[4]
quant[5]
count(quant)
length(quant)
uniform > 1 / lenght
uniform > 1 / len
len <- length(quant)
uniform > 1 / len
install.packages("corrr")
data_eg <- data.frame(visit = c(1,2,3,1,2,3),
id = c(1,1,1,2,2,2),
peso = c(50,55,58,33,35,41))
View(data_eg)
## Templates para análises longitudinais #
## Autor: Rafael Sommer
## Data: 18/03/2020
library(dplyr)
library(corrr)
eg_wide <- data_eg %>%
mutate(visit_char = paste0('visit_', visit)) %>%
select(peso, id, visit_char) %>%
spread(visit_char, peso)
## Templates para análises longitudinais #
## Autor: Rafael Sommer
## Data: 18/03/2020
library(dplyr)
eg_wide <- data_eg %>%
mutate(visit_char = paste0('visit_', visit)) %>%
select(peso, id, visit_char) %>%
spread(visit_char, peso
eg_wide <- data_eg %>%
mutate(visit_char = paste0('visit_', visit)) %>%
select(peso, id, visit_char) %>%
spread(visit_char, peso)
View(data_eg)
eg_wide <- data_eg %>%
mutate(visit_char = paste0('visit_', visit)) %>%
select(peso, id, visit_char) %>%
spread(visit_char, peso)
spread
?spread
## Templates para análises longitudinais #
## Autor: Rafael Sommer
## Data: 18/03/2020
library(tidyr)
install.packages("tidyr")
i
library(tidyr)
eg_wide <- data_eg %>%
mutate(visit_char = paste0('visit_', visit)) %>%
select(peso, id, visit_char) %>%
spread(visit_char, peso)
eg_wide
data_eg <- data.frame(visit = c(1,2,3,1,2,3,1,2,3,1,2,3),
id = c(1,1,1,2,2,2,3,3,3,4,4,4),
peso = c(50,55,58,33,35,41,65,61,63,90,89,87))
eg_wide <- data_eg %>%
mutate(visit_char = paste0('visit_', visit)) %>%
select(peso, id, visit_char) %>%
spread(visit_char, peso)
eg_wide
eg_corr <- eg_wide %>%
select(visit_1:visit3) %>% correlate() %>%
shave(upper = F) %>%
fashion(decimals = 3)
eg_wide
select(eg_wide, visit_1:visit_3)
eg_corr <- eg_wide %>%
select(visit_1:visit_3) %>% correlate() %>%
shave(upper = F) %>%
fashion(decimals = 3)
eg_corr
eg_corr <- eg_wide %>%
select(visit_1:visit_3) %>% correlate() %>%
shave(upper = T) %>%
fashion(decimals = 3)
eg_corr
eg_corr <- eg_wide %>%
select(visit_1:visit_3) %>% correlate() %>%
fashion(decimals = 3)
eg_corr
eg_corr <- eg_wide %>%
select(visit_1:visit_3) %>% correlate() %>%
shave(upper = FALSE) %>%
fashion(decimals = 3)
eg_corr
# Exemplo
eg_long <- eg_wide %>%
gather(key = visit, value = peso, visit_char)
View(eg_wide)
# Exemplo
eg_long <- eg_wide %>%
gather(key = visit, value = peso, visit_1:visit_3)
View(eg_long)
eg_long
install.packages("lme4")
install.packages("nlme")
makeCacheMatrix <- function(x = matrix()) {
i = NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
mat <- x$get()
i <- solve(mat,...)
x$setInverse(i)
i
}
cacheSolve(matrix(nrow = 5, ncol = 5))
set.seed(1)
rpois(5, 2)
install.packages("blogdown")
library(blogdown)
install.packages("simR")
install.packages("simr")
#Template para cálculo de tamanho de amostra de modelos de efeitos mistos
#Autor: Rafael S
library(simr)
sample(-1:1, size = 100)
rnorm(50,mean=0.2,sd=1)
rnorm(50,mean=0.2,sd=0.1)
group = rep(c("g1","g2"), each = nrep)
ngroup <- 2
nrep <- 250
nsub <- 50
b0 <- -0.2
b1 <- 0.15
sd <- 0.05
group = rep(c("g1","g2"), each = nrep)
eps <- rnorm(ngroup*nrep,0,sd)
eps
library("MASS")
sub = rep(LETTERS[1:nsub], each = nlesion)
# Simulate the Model
set.seed(50)
nsub = 50
nlesion = 10
b0 = -0.2
b1 = 0.2
sds = 0.05
sd = 0.05
sub = rep(LETTERS[1:nsub], each = nlesion)
sub
nsub = 20
nlesion = 10
b0 = -0.2
b1 = 0.2
sds = 0.05
sd = 0.05
sub = rep(LETTERS[1:nsub], each = nlesion)
sub = rep(LETTERS[1:nsub], each = nlesion)
sub
# Simulate the Model
set.seed(50)
nsub = 20
nlesion = 12
b0 = -0.2
b1 = 0.2
sds = 0.05
sd = 0.05
sub = rep(LETTERS[1:nsub], each = nlesion)
subef = rep(rnorm(nsub, 0, sds), each = nlesion)
subeff
subef
elevation = = rep( runif(nsub, -1, 1), each = nlesion)
elevation = rep( runif(nsub, -1, 1), each = nlesion)
sub
subef
lenght(sub)
length(sub)
rep(1[1:nsub/2], each = nlesion)
rep(1[1:nsub], each = nlesion)
rep(1, each = nlesion/2)
?rep
rep(1, 120)
rep(0, 120)
tt <- rep(0, 120)
tt1 <- rep(1, 120)
c(tt,tt1)
treatment <- c(tt,tt1)
sub
data.frame(sub = sub, tto = treatment)
simulation <- data.frame(sub = sub, tto = treatment)
treatment_test <- c(rep(1, length(sub)/2), rep(0,length(sub)/2))
treatment_test
library("MASS")
library(MASS)
?mvnorm
?mvrnorm
0:12
length(0:12)
makeFakeData = function(nsub){
time = 1:12
rt = c() # This will be filled in via the loop
time.all = rep(time, nsub)
subid.all = as.factor(rep(1:nsub, each = length(time)))
time = 1:12
rt = c() # This will be filled in via the loop
time.all = rep(time, nsub)
subid.all = as.factor(rep(1:nsub, each = length(time)))
subid.all
sigma
sigma = 30
cor(c("a","b","a","a","b","b"),c(2,12,4,5,15,21))
cor(c(1,0,1,1,0,1),c(2,12,4,5,15,21))
?mvrnorm
complement <- function(y, rho, x) {
if (missing(x)) x <- rnorm(length(y)) # Optional: supply a default if `x` is not given
y.perp <- residuals(lm(x ~ y))
rho * sd(y.perp) * y + y.perp * sd(y) * sqrt(1 - rho^2)
}
simulation
simulation$sub <- as.numeric(simulation$sub)
simulation
complement(simulation$sub, 0.3)
test.comp <- complement(simulation$sub, 0.3)
plot(simulation$sub, test.comp)
mean(test.comp)
sd(test.comp)
hist(test.comp)
test.comp <- complement(as.factor(simulation$sub), 0.3)
makeGlmer()
?makeGlmer
makeLmer(y ~ x - 1 + (1 | ID) + (lesion | ID), 0.3, 0.4, 0.05, data)
makeLmer(y ~ x - 1 + (1 | ID) + (lesion | ID), 0.3, 0.4, 0.05)
subeffect = rnorm(nsub, 0, 0.05)
subeffect = rep(standeff, each = nplot)
subeffect = rep(subeffect, each = nlesion)
subeffect
ntt = nsub * nlesion / 2
tteffect = rnorm(ntt, 0.3, 0.05)
tteffect = c(rnorm(ntt, 0.3, 0.05), rnomr(ntt, 0, 0.05))
tteffect = c(rnorm(ntt, 0.3, 0.05), rnorm(ntt, 0, 0.05))
tteffect
tteffect = c(rnorm(ntt, 0.3, 0.15), rnorm(ntt, 0, 0.1))
tteffect = c(rnorm(ntt, 0.3, 0.15), rnorm(ntt, 0, 0.1))
# Generate raw treatment effect
tteffect = c(rnorm(ntt, 0.3, 0.15), rnorm(ntt, 0, 0.15))
mvrnorm(n = 120, c(0,0), 1, 0.4, 0.4, 1)
mvrnorm(n = 120, c(0,0), 1, 0.4, 0.4, 1, EISPACK = TRUE)
mvrnorm
?mvrnorm
complement <- function(y, rho, x) {
if (missing(x)) x <- rnorm(length(y)) # Optional: supply a default if `x` is not given
y.perp <- residuals(lm(x ~ y))
rho * sd(y.perp) * y + y.perp * sd(y) * sqrt(1 - rho^2)
}
complement(subeffect, 0.4)
subeffect
# Generate subject´s effect
subeffect = rnorm(nsub, 0, 0.2)
# Generate subject´s effect
subeffect = rnorm(nsub, 0, 0.2)
subeffect = rep(subeffect, each = nlesion)
# Generate raw treatment effect
tteffect = c(rnorm(ntt, 0.3, 0.15), rnorm(ntt, 0, 0.15))
tteffect <- complement(subeffect, 0.4)
plot(tteffect, subeffect)
simulation <- data.frame(sub = sub, group = tto, sub_effect = subeffect, tt_effect = tteffect)
# Generate treatment binomial vector
tto <- c(rep(1, length(nnt)/2), rep(0,length(ntt)/2))
# Generate treatment binomial vector
tto <- c(rep(1, length(ntt)/2), rep(0,length(ntt)/2))
# Bind variables in data frame
simulation <- data.frame(sub = sub, group = tto, sub_effect = subeffect, tt_effect = tteffect)
sub
tto
# Generate treatment binomial vector
tto <- c(rep(1, length(ntt)*2), rep(0,length(ntt)*2))
ntt
# Generate treatment binomial vector
tto <- c(rep(1, length(0:ntt)*2), rep(0,length(0:ntt)*2))
tto
# Generate treatment binomial vector
tto <- c(rep(1, length(0:ntt)), rep(0,length(0:ntt)))
tto
# Bind variables in data frame
simulation <- data.frame(sub = sub, group = tto, sub_effect = subeffect, tt_effect = tteffect)
# Generate treatment binomial vector
tto <- c(rep(1, length(1:ntt)), rep(0,length(1:ntt)))
# Bind variables in data frame
simulation <- data.frame(sub = sub, group = tto, sub_effect = subeffect, tt_effect = tteffect)
simulation
library(dplyr)
tteffect[2]
View(simulation)
simulation[2,1:120]
simulation[1:120,2]
simulation[1:121,2]
simulation[1:120,4] + rnorm(ntt,0.3 + 0.15)
simulation[1:120,4] + rnorm(ntt,0.3 + 0.'')
simulation[1:120,4] + rnorm(ntt,0.3 + 0.1)
simulation[1:ntt,4] <- simulation[1:ntt,4] + rnorm(ntt,0.3 + 0.1)
plot(group,tt_effect)
plot(factor(group),tt_effect)
plot(factor(simulation$group),simulation$tt_effect)
simulation[group == 0]
simulation[group == 0,]
simulation[group == "0"]
simulation[group == "0",]
length(simulation[,4])
simulation[,4] <- simulation[,4] + rnorm(length(simulation[,4]),0 + 0.1)
plot(factor(simulation$group),simulation$tt_effect)
plot(simulation)
# Generate treatment real effect
simulation[1:ntt,4] <- simulation[1:ntt,4] + 0.3
simulation[,4] <- simulation[,4] + rnorm(length(simulation[,4]),0 + 0.1)
set.seed(50)
nsub = 20
nlesion = 12
ntt = nsub * nlesion / 2
# Generate treatment binomial vector
tto <- c(rep(1, length(1:ntt)), rep(0,length(1:ntt)))
# Generate subjects factor vector
sub = rep(LETTERS[1:nsub], each = nlesion)
# Generate subject´s effect
subeffect = rnorm(nsub, 0, 0.2)
subeffect = rep(subeffect, each = nlesion)
# Generate correlated data for subject x treatment
complement <- function(y, rho, x) {
if (missing(x)) x <- rnorm(length(y)) # Optional: supply a default if `x` is not given
y.perp <- residuals(lm(x ~ y))
rho * sd(y.perp) * y + y.perp * sd(y) * sqrt(1 - rho^2)
}
tteffect <- complement(subeffect, 0.4)
# Bind variables in data frame
simulation <- data.frame(sub = sub, group = tto,
sub_effect = subeffect,
tt_effect = tteffect)
# Generate treatment real effect
simulation[1:ntt,4] <- simulation[1:ntt,4] + 0.3
simulation[,4] <- simulation[,4] + rnorm(length(simulation[,4]),0 + 0.1)
plot(simulation)
subeffect
simulation
set.seed(50)
nsub = 20
nlesion = 12
ntt = nsub * nlesion / 2
# Generate treatment binomial vector
tto <- c(rep(1, length(1:ntt)), rep(0,length(1:ntt)))
# Generate subjects factor vector
sub = rep(LETTERS[1:nsub], each = nlesion)
# Generate subject´s random effect
subeffect = rnorm(nsub, 0, 0.2)
subeffect = rep(subeffect, each = nlesion)
subeffect
complement <- function(y, rho, x) {
if (missing(x)) x <- rnorm(length(y)) # Optional: supply a default if `x` is not given
y.perp <- residuals(lm(x ~ y))
rho * sd(y.perp) * y + y.perp * sd(y) * sqrt(1 - rho^2)
}
tteffect <- complement(subeffect, 0.4)
plot(tteffect,subeffect)
# Bind variables in data frame
simulation <- data.frame(sub = sub, group = tto,
sub_effect = subeffect,
tt_effect = tteffect)
simulation[1:ntt,4] <- simulation[1:ntt,4] + 0.3
rnorm(20,0,0.15)
simulation[,4] <- simulation[,4] + rnorm(length(simulation[,4]),0 ,0.15)
plot(simulation)
lmer(data = simulation,
formula = tteffect ~ group + (group|sub))
mean(simulation[group == 1])
mean(simulation[simulation$group == 1])
mean(simulation[,simulation$group == 1])
mean(simulation[,simulation$group == ""])
mean(simulation[,simulation$group == "1"])
mean(simulation[,simulation$group = "1"])
fit <- lmer(data = simulation,
formula = tteffect ~ group + (group|sub))
summary(fit)
powerSim(fit)
View(fit)
View(fit)
lm(simulation$tt_effect ~ simulation$group)
summary(lm(simulation$tt_effect ~ simulation$group))
library(blogdown)
install.packages("git2r")
??git2r
?fft
.libPaths()
.Rprofile
library(devtools)
load_all()
getwd()
.libPaths()
setwd("C:/Program Files/")
getwd()
dir()
library(devtools)
create(emocempr)
create("emocempr")
create("emocempr")
setwd("C:/Users/Rafael/OneDrive/Documents")
setwd("C:/Users/Rafael")
dir()
setwd("C:/Users/Rafael/Documents")
dir()
dir()
create("emocempr")
dir()
setwe(emocempr)
setwd(emocempr)
setwd("emocempr")
dir()
devtools::load_all(".")
install.packages("ellipsis")
devtools::load_all(".")
library(emocempr)
library(devtoll)
library(devtools)
install_github("rafaelsommer1/emocempr")
library(devtools)
build_manual()
datafile <- "C:/Users/Rafael/Documents/emocempv2_2105.csv"
emocemp_messy <- read.csv(datafile,
skip = 1,
encoding = "UTF-8") # Load Data
emocempv2 <- emocemp_messy[-c(1),-c(1:17)] # Exclude irrelevant rows and collumns from table
View(emocempv2)
# Renaming
colnames(emocempv2)
library(devtools)
install_github("rafaelsommer1/emocempr")
library(emocempr)
setwd("C:/Users/Rafael/Documents")
setwd("C:/Users/Rafael/Documents/")
library(devtools)
install_github("rafaelsommer1/emocempr")
library(emocempr)
?clean_v1
detach("package:emocempr", unload = TRUE)
library(devtools)
install_github("rafaelsommer1/emocempr")
library(emocempr)
?clean_v1
getwd()
dados_limpos <- clean_v1("C:/Users/Rafael/Documents/EMOCEMP V1 - Oficial_May21, 2020_08.04")
dados_limpos <- clean_v1("C:/Users/Rafael/Documents/EMOCEMP V1 - Oficial_May21, 2020_08.04.csv")
View(dados_limpos)
?clean_brain
dados_mri <- clean_brain("MRI_encefalo_EMOCEMP_V1_May 21, 2020_14.59.csv")
View(dados_mri)
